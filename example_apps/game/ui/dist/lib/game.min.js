// @swim/game v4.0.0 (c) 2015-2023 Swim.inc
(function(global, factory) {
  typeof exports === "object" && typeof module !== "undefined" ? factory(exports, require("@swim/panel"), require("@swim/view"), require("@swim/dom"), require("@swim/controller"), require("@swim/model"), require("@swim/ux"), require("@swim/theme"), require("@swim/client"), require("@swim/table"), require("@swim/component"), require("@swim/uri"), require("@swim/chart"), require("@swim/graphics"), require("@swim/util")) : typeof define === "function" && define.amd ? define([ "exports", "@swim/panel", "@swim/view", "@swim/dom", "@swim/controller", "@swim/model", "@swim/ux", "@swim/theme", "@swim/client", "@swim/table", "@swim/component", "@swim/uri", "@swim/chart", "@swim/graphics", "@swim/util" ], factory) : (global = typeof globalThis !== "undefined" ? globalThis : global || self, 
  factory((global.swim = global.swim || {}, global.swim.game = global.swim.game || {}), global.swim, global.swim, global.swim, global.swim, global.swim, global.swim, global.swim, global.swim, global.swim, global.swim, global.swim, global.swim, global.swim, global.swim));
})(this, (function(exports, panel, view, dom, controller, model, ux, theme, client, table, component, uri, chart, graphics, util) {
  "use strict";
  function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) {
      if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected");
      return f;
    }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for (var i = decorators.length - 1; i >= 0; i--) {
      var context = {};
      for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
      for (var p in contextIn.access) context.access[p] = contextIn.access[p];
      context.addInitializer = function(f) {
        if (done) throw new TypeError("Cannot add initializers after decoration has completed");
        extraInitializers.push(accept(f || null));
      };
      var result = (0, decorators[i])(kind === "accessor" ? {
        get: descriptor.get,
        set: descriptor.set
      } : descriptor[key], context);
      if (kind === "accessor") {
        if (result === void 0) continue;
        if (result === null || typeof result !== "object") throw new TypeError("Object expected");
        if (_ = accept(result.get)) descriptor.get = _;
        if (_ = accept(result.set)) descriptor.set = _;
        if (_ = accept(result.init)) initializers.unshift(_);
      } else if (_ = accept(result)) {
        if (kind === "field") initializers.unshift(_); else descriptor[key] = _;
      }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
  }
  function __runInitializers(thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for (var i = 0; i < initializers.length; i++) {
      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    }
    return useValue ? value : void 0;
  }
  typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
  };
  let KdSeriesView = (() => {
    var _a;
    let _classSuper = dom.HtmlView;
    let _instanceExtraInitializers = [];
    let _containerView_decorators;
    let _containerView_initializers = [];
    let _canvasView_decorators;
    let _canvasView_initializers = [];
    let _graphView_decorators;
    let _graphView_initializers = [];
    let _plotView_decorators;
    let _plotView_initializers = [];
    return _a = class KdSeriesView extends _classSuper {
      constructor() {
        const div = document.createElement("div");
        div.classList.add("kdSeriesContainer");
        super(div);
        this.DEFAULT_STROKE = (__runInitializers(this, _instanceExtraInitializers), "#FBFBFB");
        this.ELECTRIC_TEAL = "#66FFDD";
        this.TANGERINE_SCREAM = "#F8A147";
        this.containerView = __runInitializers(this, _containerView_initializers, void 0);
        this.canvasView = __runInitializers(this, _canvasView_initializers, void 0);
        this.graphView = __runInitializers(this, _graphView_initializers, void 0);
        this.plotView = __runInitializers(this, _plotView_initializers, void 0);
        this.containerView.setView(div);
        this.plotView.insertView(this.graphView.insertView(this.canvasView.insertView(this)));
      }
      addPoint(x, y) {
        this.plotView.attachView().insertDataPoint(new chart.DataPointView(x, y));
      }
      updateStroke(change) {
        const newStroke = change === "none" ? this.DEFAULT_STROKE : change === "rising" ? this.ELECTRIC_TEAL : this.TANGERINE_SCREAM;
        this.plotView.attachView().set({
          stroke: newStroke
        }, util.Timing.fromInit({
          easing: "linear",
          t0: 0,
          dt: 500
        }));
      }
    }, (() => {
      var _b;
      const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create((_b = _classSuper[Symbol.metadata]) !== null && _b !== void 0 ? _b : null) : void 0;
      _containerView_decorators = [ view.ViewRef({
        viewType: dom.HtmlView,
        initView(view) {
          view.set({
            style: {
              display: "flex",
              width: "90%",
              height: "67%",
              touchAction: "none",
              userSelect: "none"
            }
          });
        }
      }) ];
      _canvasView_decorators = [ view.ViewRef({
        viewType: graphics.CanvasView,
        createView() {
          return graphics.CanvasView.create().set({
            style: {
              touchAction: "manipulation"
            },
            wheelEvents: true,
            mouseEvents: true,
            pointerEvents: true,
            touchEvents: true
          });
        }
      }) ];
      _graphView_decorators = [ view.ViewRef({
        viewType: chart.GraphView,
        createView() {
          const graphView = chart.GraphView.create();
          graphView.domainTracking(true);
          return graphView;
        }
      }) ];
      _plotView_decorators = [ view.ViewRef({
        viewType: chart.LinePlotView,
        createView() {
          const plotView = chart.LinePlotView.create().set({
            hitMode: "plot",
            stroke: this.owner.DEFAULT_STROKE,
            strokeWidth: 1
          });
          return plotView;
        }
      }) ];
      __esDecorate(null, null, _containerView_decorators, {
        kind: "field",
        name: "containerView",
        static: false,
        private: false,
        access: {
          has: obj => "containerView" in obj,
          get: obj => obj.containerView,
          set: (obj, value) => {
            obj.containerView = value;
          }
        },
        metadata: _metadata
      }, _containerView_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _canvasView_decorators, {
        kind: "field",
        name: "canvasView",
        static: false,
        private: false,
        access: {
          has: obj => "canvasView" in obj,
          get: obj => obj.canvasView,
          set: (obj, value) => {
            obj.canvasView = value;
          }
        },
        metadata: _metadata
      }, _canvasView_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _graphView_decorators, {
        kind: "field",
        name: "graphView",
        static: false,
        private: false,
        access: {
          has: obj => "graphView" in obj,
          get: obj => obj.graphView,
          set: (obj, value) => {
            obj.graphView = value;
          }
        },
        metadata: _metadata
      }, _graphView_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _plotView_decorators, {
        kind: "field",
        name: "plotView",
        static: false,
        private: false,
        access: {
          has: obj => "plotView" in obj,
          get: obj => obj.plotView,
          set: (obj, value) => {
            obj.plotView = value;
          }
        },
        metadata: _metadata
      }, _plotView_initializers, _instanceExtraInitializers);
      if (_metadata) Object.defineProperty(_a, Symbol.metadata, {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _metadata
      });
    })(), _a;
  })();
  let LeaderboardRowController = (() => {
    var _a;
    let _classSuper = table.RowController;
    let _instanceExtraInitializers = [];
    let _row_decorators;
    let _row_initializers = [];
    let _leaf_decorators;
    let _leaf_initializers = [];
    let _trait_decorators;
    let _trait_initializers = [];
    let _rankCell_decorators;
    let _rankCell_initializers = [];
    let _nameCell_decorators;
    let _nameCell_initializers = [];
    let _levelCell_decorators;
    let _levelCell_initializers = [];
    let _teamCell_decorators;
    let _teamCell_initializers = [];
    let _teamTeamSpan_decorators;
    let _teamTeamSpan_initializers = [];
    let _teamPctSpan_decorators;
    let _teamPctSpan_initializers = [];
    let _kdCell_decorators;
    let _kdCell_initializers = [];
    let _kdCellSeries_decorators;
    let _kdCellSeries_initializers = [];
    let _kdCellText_decorators;
    let _kdCellText_initializers = [];
    let _playerId_decorators;
    let _playerId_initializers = [];
    let _changeState_decorators;
    let _changeState_initializers = [];
    let _statsHistoryDownlink_decorators;
    let _statsHistoryDownlink_initializers = [];
    return _a = class LeaderboardRowController extends _classSuper {
      constructor(trait) {
        super();
        this._resetChangeStateTimer = (__runInitializers(this, _instanceExtraInitializers), 
        null);
        this.row = __runInitializers(this, _row_initializers, void 0);
        this.leaf = __runInitializers(this, _leaf_initializers, void 0);
        this.trait = __runInitializers(this, _trait_initializers, void 0);
        this.rankCell = __runInitializers(this, _rankCell_initializers, void 0);
        this.nameCell = __runInitializers(this, _nameCell_initializers, void 0);
        this.levelCell = __runInitializers(this, _levelCell_initializers, void 0);
        this.teamCell = __runInitializers(this, _teamCell_initializers, void 0);
        this.teamTeamSpan = __runInitializers(this, _teamTeamSpan_initializers, void 0);
        this.teamPctSpan = __runInitializers(this, _teamPctSpan_initializers, void 0);
        this.kdCell = __runInitializers(this, _kdCell_initializers, void 0);
        this.kdCellSeries = __runInitializers(this, _kdCellSeries_initializers, void 0);
        this.kdCellText = __runInitializers(this, _kdCellText_initializers, void 0);
        this.playerId = __runInitializers(this, _playerId_initializers, void 0);
        this.changeState = __runInitializers(this, _changeState_initializers, void 0);
        this.statsHistoryDownlink = __runInitializers(this, _statsHistoryDownlink_initializers, void 0);
        this.trait.set(trait);
        const urlParams = new URLSearchParams(window.location.search);
        let host = urlParams.get("host");
        const baseUri = uri.Uri.parse(document.location.href);
        if (!host) {
          host = baseUri.base().withScheme(baseUri.schemeName === "https" ? "warps" : "warp").toString();
        }
        this.statsHistoryDownlink.setHostUri(host);
      }
      updateRow(item, rank, change = "none") {
        const playerId = item.id;
        const name = item.tag;
        const level = item.level;
        const kills = item.totalKills;
        const deaths = item.totalDeaths;
        const kd = deaths === 0 ? `${kills}.00` : (kills / deaths).toFixed(2);
        const t = item.teamCount.Donut;
        const ct = item.teamCount.Hubble;
        this.rankCell.attachTrait().set({
          content: rank
        });
        this.nameCell.attachTrait().set({
          content: name
        });
        this.levelCell.attachTrait().set({
          content: level.toFixed(0)
        });
        this.teamTeamSpan.attachView().node.innerText = t >= ct ? "T" : "CT";
        let pctText = `${Math.round((t >= ct ? t / (t + ct) : ct / (t + ct)) * 100)}%`;
        if ((t !== null && t !== void 0 ? t : 0) === 0 || (ct !== null && ct !== void 0 ? ct : 0) === 0) {
          pctText = "100%";
        }
        this.teamPctSpan.attachView().node.innerText = pctText;
        this.kdCellText.attachView().node.innerText = kd;
        if (change !== "none") {
          this.changeState.setValue(change);
        }
        this.playerId.setValue(playerId);
      }
    }, (() => {
      var _b;
      const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create((_b = _classSuper[Symbol.metadata]) !== null && _b !== void 0 ? _b : null) : void 0;
      _row_decorators = [ controller.TraitViewRef({
        viewType: table.RowView,
        extends: true,
        initView(rowView) {
          super.initView(rowView);
          rowView.set({
            style: {
              height: "44px"
            }
          });
        }
      }) ];
      _leaf_decorators = [ controller.TraitViewRef({
        viewType: table.LeafView,
        extends: true,
        initView(leafView) {
          var _b;
          super.initView(leafView);
          leafView.set({
            style: {
              height: "44px"
            }
          });
          if (Number.parseInt((_b = this.owner.key) !== null && _b !== void 0 ? _b : "0", 10) % 2 === 1) {
            leafView.set({
              style: {
                backgroundColor: "#242424"
              }
            });
          }
        },
        viewDidPress() {
          return;
        },
        viewDidLongPress() {
          return;
        }
      }) ];
      _trait_decorators = [ model.TraitRef({
        traitType: table.RowTrait,
        extends: true
      }) ];
      _rankCell_decorators = [ controller.TraitViewRef({
        traitType: table.TextCellTrait,
        viewType: table.TextCellView,
        initView(view) {
          super.initView(view);
          view.set({
            classList: [ "rankCell" ],
            style: {
              fontSize: "14px",
              color: "#FBFBFB",
              opacity: .8
            }
          });
        },
        extends: true
      }) ];
      _nameCell_decorators = [ controller.TraitViewRef({
        traitType: table.TextCellTrait,
        viewType: table.TextCellView,
        initView(view) {
          super.initView(view);
          view.set({
            classList: [ "nameCell" ],
            style: {
              fontSize: "14px",
              color: "#FBFBFB",
              opacity: .8
            }
          });
        },
        extends: true
      }) ];
      _levelCell_decorators = [ controller.TraitViewRef({
        traitType: table.TextCellTrait,
        viewType: table.TextCellView,
        initView(view) {
          super.initView(view);
          view.set({
            classList: [ "levelCell" ],
            style: {
              fontSize: "14px",
              color: "#FBFBFB",
              opacity: .8
            }
          });
        },
        extends: true
      }) ];
      _teamCell_decorators = [ controller.TraitViewRef({
        traitType: table.TextCellTrait,
        viewType: table.TextCellView,
        initView(view) {
          super.initView(view);
          view.set({
            classList: [ "teamCell" ],
            style: {
              color: "#FBFBFB",
              opacity: .8,
              justifyContent: "center"
            }
          });
          const firstChild = view.firstChild;
          if (firstChild) {
            view.removeChild(firstChild);
          }
          this.owner.teamTeamSpan.insertView(view, undefined, null, "teamTeamSpan");
          this.owner.teamPctSpan.insertView(view, undefined, null, "teamPctSpan");
        },
        extends: true
      }) ];
      _teamTeamSpan_decorators = [ view.ViewRef({
        viewType: table.TextCellView,
        createView() {
          return new dom.HtmlView(document.createElement("span")).set({
            classList: [ "teamTeamSpan" ],
            style: {
              display: "inline-flex",
              justifyContent: "center",
              alignItems: "center",
              marginRight: "4px",
              marginBottom: "4px",
              fontSize: "14px"
            }
          });
        }
      }) ];
      _teamPctSpan_decorators = [ view.ViewRef({
        viewType: table.TextCellView,
        createView() {
          return new dom.HtmlView(document.createElement("span")).set({
            classList: [ "teamPctSpan" ],
            style: {
              display: "inline-flex",
              justifyContent: "center",
              alignItems: "center",
              marginTop: "4px",
              fontSize: "12px"
            }
          });
        }
      }) ];
      _kdCell_decorators = [ controller.TraitViewRef({
        traitType: table.CellTrait,
        viewType: table.CellView,
        initView(view) {
          super.initView(view);
          view.set({
            classList: [ "kdCell" ],
            style: {
              fontSize: "14px",
              color: "#FBFBFB",
              opacity: .8
            }
          });
          const firstChild = view.firstChild;
          if (firstChild) {
            view.removeChild(firstChild);
          }
          this.owner.kdCellSeries.insertView(view, undefined, null, "kdCellSeries");
          this.owner.kdCellText.insertView(view, undefined, null, "kdCellText");
        },
        extends: true
      }) ];
      _kdCellSeries_decorators = [ view.ViewRef({
        viewType: KdSeriesView,
        createView() {
          return new KdSeriesView;
        }
      }) ];
      _kdCellText_decorators = [ view.ViewRef({
        viewType: table.TextCellView,
        createView() {
          return new dom.HtmlView(document.createElement("span")).set({
            classList: [ "kdCellText" ],
            style: {
              display: "inline-flex",
              justifyContent: "center",
              alignItems: "center",
              marginLeft: "4px"
            }
          });
        }
      }) ];
      _playerId_decorators = [ component.Property({
        valueType: Number,
        didSetValue(newValue) {
          const nodeUri = `/player/${newValue}`;
          if (this.owner.statsHistoryDownlink.opened) {
            const oldKdCellSeries = this.owner.kdCell.attachView().getChild("kdCellSeries", KdSeriesView);
            if (oldKdCellSeries) {
              this.owner.kdCell.attachView().removeChild("kdCellSeries");
              const newKdCellSeries = this.owner.kdCell.attachView().prependChild(KdSeriesView, "kdCellSeries");
              this.owner.kdCellSeries.setView(newKdCellSeries);
              if (this.owner.changeState.value !== "none") {
                this.owner.kdCellSeries.attachView().updateStroke(this.owner.changeState.value);
              }
            }
            this.owner.statsHistoryDownlink.close();
          }
          this.owner.statsHistoryDownlink.setNodeUri(nodeUri);
          this.owner.statsHistoryDownlink.open();
        }
      }) ];
      _changeState_decorators = [ component.Property({
        value: "none",
        valueType: String,
        didSetValue(newValue, oldValue) {
          if (newValue !== "none") {
            this.owner.row.attachView().classList.remove(newValue === "rising" ? "falling" : "rising");
            this.owner.row.attachView().classList.add(newValue.toString());
            this.owner.kdCellSeries.attachView().updateStroke(newValue.toString());
            if (this.owner._resetChangeStateTimer !== null) {
              clearTimeout(this.owner._resetChangeStateTimer);
            }
            this.owner._resetChangeStateTimer = setTimeout((() => {
              this.owner.row.attachView().classList.remove(newValue.toString());
              this.owner.kdCellSeries.attachView().updateStroke("none");
              this.owner.changeState.setValue("none");
            }), 2500);
          }
        }
      }) ];
      _statsHistoryDownlink_decorators = [ client.MapDownlink({
        laneUri: "statsHistory",
        didUpdate(key, newValue) {
          const timestamp = key.numberValue();
          const kdRatio = newValue.get("kdRatio").numberValue();
          this.owner.kdCellSeries.attachView().addPoint(timestamp, kdRatio);
        }
      }) ];
      __esDecorate(null, null, _row_decorators, {
        kind: "field",
        name: "row",
        static: false,
        private: false,
        access: {
          has: obj => "row" in obj,
          get: obj => obj.row,
          set: (obj, value) => {
            obj.row = value;
          }
        },
        metadata: _metadata
      }, _row_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _leaf_decorators, {
        kind: "field",
        name: "leaf",
        static: false,
        private: false,
        access: {
          has: obj => "leaf" in obj,
          get: obj => obj.leaf,
          set: (obj, value) => {
            obj.leaf = value;
          }
        },
        metadata: _metadata
      }, _leaf_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _trait_decorators, {
        kind: "field",
        name: "trait",
        static: false,
        private: false,
        access: {
          has: obj => "trait" in obj,
          get: obj => obj.trait,
          set: (obj, value) => {
            obj.trait = value;
          }
        },
        metadata: _metadata
      }, _trait_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _rankCell_decorators, {
        kind: "field",
        name: "rankCell",
        static: false,
        private: false,
        access: {
          has: obj => "rankCell" in obj,
          get: obj => obj.rankCell,
          set: (obj, value) => {
            obj.rankCell = value;
          }
        },
        metadata: _metadata
      }, _rankCell_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _nameCell_decorators, {
        kind: "field",
        name: "nameCell",
        static: false,
        private: false,
        access: {
          has: obj => "nameCell" in obj,
          get: obj => obj.nameCell,
          set: (obj, value) => {
            obj.nameCell = value;
          }
        },
        metadata: _metadata
      }, _nameCell_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _levelCell_decorators, {
        kind: "field",
        name: "levelCell",
        static: false,
        private: false,
        access: {
          has: obj => "levelCell" in obj,
          get: obj => obj.levelCell,
          set: (obj, value) => {
            obj.levelCell = value;
          }
        },
        metadata: _metadata
      }, _levelCell_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _teamCell_decorators, {
        kind: "field",
        name: "teamCell",
        static: false,
        private: false,
        access: {
          has: obj => "teamCell" in obj,
          get: obj => obj.teamCell,
          set: (obj, value) => {
            obj.teamCell = value;
          }
        },
        metadata: _metadata
      }, _teamCell_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _teamTeamSpan_decorators, {
        kind: "field",
        name: "teamTeamSpan",
        static: false,
        private: false,
        access: {
          has: obj => "teamTeamSpan" in obj,
          get: obj => obj.teamTeamSpan,
          set: (obj, value) => {
            obj.teamTeamSpan = value;
          }
        },
        metadata: _metadata
      }, _teamTeamSpan_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _teamPctSpan_decorators, {
        kind: "field",
        name: "teamPctSpan",
        static: false,
        private: false,
        access: {
          has: obj => "teamPctSpan" in obj,
          get: obj => obj.teamPctSpan,
          set: (obj, value) => {
            obj.teamPctSpan = value;
          }
        },
        metadata: _metadata
      }, _teamPctSpan_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _kdCell_decorators, {
        kind: "field",
        name: "kdCell",
        static: false,
        private: false,
        access: {
          has: obj => "kdCell" in obj,
          get: obj => obj.kdCell,
          set: (obj, value) => {
            obj.kdCell = value;
          }
        },
        metadata: _metadata
      }, _kdCell_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _kdCellSeries_decorators, {
        kind: "field",
        name: "kdCellSeries",
        static: false,
        private: false,
        access: {
          has: obj => "kdCellSeries" in obj,
          get: obj => obj.kdCellSeries,
          set: (obj, value) => {
            obj.kdCellSeries = value;
          }
        },
        metadata: _metadata
      }, _kdCellSeries_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _kdCellText_decorators, {
        kind: "field",
        name: "kdCellText",
        static: false,
        private: false,
        access: {
          has: obj => "kdCellText" in obj,
          get: obj => obj.kdCellText,
          set: (obj, value) => {
            obj.kdCellText = value;
          }
        },
        metadata: _metadata
      }, _kdCellText_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _playerId_decorators, {
        kind: "field",
        name: "playerId",
        static: false,
        private: false,
        access: {
          has: obj => "playerId" in obj,
          get: obj => obj.playerId,
          set: (obj, value) => {
            obj.playerId = value;
          }
        },
        metadata: _metadata
      }, _playerId_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _changeState_decorators, {
        kind: "field",
        name: "changeState",
        static: false,
        private: false,
        access: {
          has: obj => "changeState" in obj,
          get: obj => obj.changeState,
          set: (obj, value) => {
            obj.changeState = value;
          }
        },
        metadata: _metadata
      }, _changeState_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _statsHistoryDownlink_decorators, {
        kind: "field",
        name: "statsHistoryDownlink",
        static: false,
        private: false,
        access: {
          has: obj => "statsHistoryDownlink" in obj,
          get: obj => obj.statsHistoryDownlink,
          set: (obj, value) => {
            obj.statsHistoryDownlink = value;
          }
        },
        metadata: _metadata
      }, _statsHistoryDownlink_initializers, _instanceExtraInitializers);
      if (_metadata) Object.defineProperty(_a, Symbol.metadata, {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _metadata
      });
    })(), _a;
  })();
  let LeaderboardTableController = (() => {
    var _a;
    let _classSuper = table.TableController;
    let _instanceExtraInitializers = [];
    let _tableModel_decorators;
    let _tableModel_initializers = [];
    let _table_decorators;
    let _table_initializers = [];
    let _header_decorators;
    let _header_initializers = [];
    let _headerLevelCellView_decorators;
    let _headerLevelCellView_initializers = [];
    let _headerKdCellView_decorators;
    let _headerKdCellView_initializers = [];
    let _rows_decorators;
    let _rows_initializers = [];
    let _leaderboardMetric_decorators;
    let _leaderboardMetric_initializers = [];
    let _leaderboardDownlink_decorators;
    let _leaderboardDownlink_initializers = [];
    return _a = class LeaderboardTableController extends _classSuper {
      constructor() {
        super();
        this.LEADERBOARD_SIZE = (__runInitializers(this, _instanceExtraInitializers), 100);
        this._didSync = false;
        this.tableModel = __runInitializers(this, _tableModel_initializers, void 0);
        this.table = __runInitializers(this, _table_initializers, void 0);
        this.header = __runInitializers(this, _header_initializers, void 0);
        this.headerLevelCellView = __runInitializers(this, _headerLevelCellView_initializers, void 0);
        this.headerKdCellView = __runInitializers(this, _headerKdCellView_initializers, void 0);
        this.rows = __runInitializers(this, _rows_initializers, void 0);
        this.leaderboardMetric = __runInitializers(this, _leaderboardMetric_initializers, void 0);
        this.leaderboardDownlink = __runInitializers(this, _leaderboardDownlink_initializers, void 0);
        _a.initFasteners(this);
      }
      didMount() {
        const urlParams = new URLSearchParams(window.location.search);
        let host = urlParams.get("host");
        const baseUri = uri.Uri.parse(document.location.href);
        if (!host) {
          host = baseUri.base().withScheme(baseUri.schemeName === "https" ? "warps" : "warp").toString();
        }
        const nodeUri = "/player";
        const laneUri = `leaderboard`;
        this.leaderboardDownlink.setLaneUri(laneUri);
        this.leaderboardDownlink.setHostUri(host);
        this.leaderboardDownlink.setNodeUri(nodeUri);
        this.leaderboardDownlink.open();
      }
      createLeaderboardRowController(rank, item) {
        const rowModel = new model.Model;
        const rowTrait = new table.RowTrait;
        rowModel.setTrait(rank, rowTrait);
        const rankCell = rowTrait.getOrCreateCell("rank", table.TextCellTrait);
        const nameCell = rowTrait.getOrCreateCell("name", table.TextCellTrait);
        const levelCell = rowTrait.getOrCreateCell("level", table.TextCellTrait);
        const teamCell = rowTrait.getOrCreateCell("team", table.TextCellTrait);
        const kdCell = rowTrait.getOrCreateCell("kd", table.TextCellTrait);
        this.tableModel.value.appendChild(rowModel);
        const newLeaderboardRowController = Object.values(this.rows.controllers).find((c => (c === null || c === void 0 ? void 0 : c.key) === rank));
        if (newLeaderboardRowController) {
          newLeaderboardRowController.playerId.setValue(item.id);
          newLeaderboardRowController.rankCell.setTrait(rankCell);
          newLeaderboardRowController.nameCell.setTrait(nameCell);
          newLeaderboardRowController.levelCell.setTrait(levelCell);
          newLeaderboardRowController.teamCell.setTrait(teamCell);
          newLeaderboardRowController.kdCell.setTrait(kdCell);
          newLeaderboardRowController.updateRow(item, rank);
          [ "rank", "name", "level", "team", "kd" ].forEach((function(key) {
            const view = Object.values(newLeaderboardRowController.row.attachView().leaf.attachView().cells.views).find((v => (v === null || v === void 0 ? void 0 : v.key) === key));
            if (view) {
              newLeaderboardRowController[`${key}Cell`].setView(view, null, key);
            }
          }));
        }
      }
    }, (() => {
      var _b;
      const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create((_b = _classSuper[Symbol.metadata]) !== null && _b !== void 0 ? _b : null) : void 0;
      _tableModel_decorators = [ component.Property({
        valueType: model.Model
      }) ];
      _table_decorators = [ controller.TraitViewRef({
        extends: true,
        traitWillAttachRow(rowTrait, targetTrait) {
          this.owner.rows.addTrait(rowTrait, targetTrait, rowTrait.key);
        }
      }) ];
      _header_decorators = [ controller.TraitViewControllerRef({
        extends: true,
        setUpSortableCells() {
          var _b, _c, _d, _e;
          const levelView = (_c = (_b = this.owner.header.view) === null || _b === void 0 ? void 0 : _b.childMap) === null || _c === void 0 ? void 0 : _c.level;
          if (levelView) {
            this.owner.headerLevelCellView.setView(levelView);
          }
          const kdView = (_e = (_d = this.owner.header.view) === null || _d === void 0 ? void 0 : _d.childMap) === null || _e === void 0 ? void 0 : _e.kd;
          if (kdView) {
            this.owner.headerKdCellView.setView(kdView);
          }
        }
      }) ];
      _headerLevelCellView_decorators = [ view.ViewRef({
        viewType: dom.HtmlView,
        initView(view) {
          view.set({
            classList: [ "clickable" ],
            style: {
              textDecorationLine: "underline",
              textDecorationColor: "#BBBBBB",
              cursor: "pointer"
            }
          });
          const that = this;
          view === null || view === void 0 ? void 0 : view.addEventListener("click", (function() {
            that.owner.leaderboardMetric.setValue("xp");
          }));
        }
      }) ];
      _headerKdCellView_decorators = [ view.ViewRef({
        viewType: dom.HtmlView,
        initView(view) {
          view.set({
            classList: [ "clickable", "sorting" ],
            style: {
              textDecorationLine: "underline",
              textDecorationColor: "#BBBBBB",
              cursor: "pointer"
            }
          });
          const that = this;
          view === null || view === void 0 ? void 0 : view.addEventListener("click", (function() {
            that.owner.leaderboardMetric.setValue("kd");
          }));
        }
      }) ];
      _rows_decorators = [ controller.TraitViewControllerSet({
        extends: true,
        controllerDidEnterLeafView(leafView) {
          leafView.hover.focus(false);
        },
        controllerDidLeaveLeafView(leafView) {
          leafView.hover.unfocus(false);
        },
        controllerDidPressLeafView(input, event, leafView) {
          leafView.highlight.toggle();
        },
        createController(trait) {
          var _b;
          const traitKey = (_b = trait === null || trait === void 0 ? void 0 : trait.key) !== null && _b !== void 0 ? _b : "";
          if (trait && traitKey) {
            const leaderboardRowController = new LeaderboardRowController(trait);
            leaderboardRowController.setKey(traitKey);
            return leaderboardRowController;
          }
          return super.createController(trait);
        }
      }) ];
      _leaderboardMetric_decorators = [ component.Property({
        value: "kd",
        valueType: String,
        didSetValue(newValue) {
          if (this.owner.leaderboardDownlink.opened) {
            this.owner.leaderboardDownlink.close();
          }
          if (newValue === "kd") {
            this.owner.headerKdCellView.attachView().classList.add("sorting");
            this.owner.headerLevelCellView.attachView().classList.remove("sorting");
          } else if (newValue === "xp") {
            this.owner.headerLevelCellView.attachView().classList.add("sorting");
            this.owner.headerKdCellView.attachView().classList.remove("sorting");
          }
          this.owner.leaderboardDownlink.setLaneUri(`leaderboard`);
          this.owner.leaderboardDownlink.open();
        }
      }) ];
      _leaderboardDownlink_decorators = [ client.ValueDownlink({
        consumed: true,
        didSet(value) {
          let items = Object.values(value.toObject());
          if (this.owner._didSync) {
            items = items.reverse();
          }
          items.forEach(((item, index) => {
            const rank = (this.owner._didSync ? Math.abs(index - this.owner.LEADERBOARD_SIZE) : index + 1).toFixed(0);
            if (!item.tag) {
              return;
            }
            if (!this.owner._didSync) {
              this.owner.createLeaderboardRowController(rank, item);
            } else {
              const rowController = this.owner.getChild(rank, LeaderboardRowController);
              const playerId = item.id;
              let change = "none";
              if (!playerId || !rowController) {
                return;
              }
              const currentPlayerId = rowController.playerId.value;
              if (currentPlayerId && currentPlayerId !== playerId) {
                const prevRank = Object.values(this.owner.rows.controllers).find((c => (c === null || c === void 0 ? void 0 : c.playerId.value) === playerId));
                if (prevRank !== undefined) {
                  change = "falling";
                } else {
                  change = "rising";
                }
              }
              rowController.updateRow(item, rank, change);
            }
          }));
          this.owner._didSync = true;
        }
      }) ];
      __esDecorate(null, null, _tableModel_decorators, {
        kind: "field",
        name: "tableModel",
        static: false,
        private: false,
        access: {
          has: obj => "tableModel" in obj,
          get: obj => obj.tableModel,
          set: (obj, value) => {
            obj.tableModel = value;
          }
        },
        metadata: _metadata
      }, _tableModel_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _table_decorators, {
        kind: "field",
        name: "table",
        static: false,
        private: false,
        access: {
          has: obj => "table" in obj,
          get: obj => obj.table,
          set: (obj, value) => {
            obj.table = value;
          }
        },
        metadata: _metadata
      }, _table_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _header_decorators, {
        kind: "field",
        name: "header",
        static: false,
        private: false,
        access: {
          has: obj => "header" in obj,
          get: obj => obj.header,
          set: (obj, value) => {
            obj.header = value;
          }
        },
        metadata: _metadata
      }, _header_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _headerLevelCellView_decorators, {
        kind: "field",
        name: "headerLevelCellView",
        static: false,
        private: false,
        access: {
          has: obj => "headerLevelCellView" in obj,
          get: obj => obj.headerLevelCellView,
          set: (obj, value) => {
            obj.headerLevelCellView = value;
          }
        },
        metadata: _metadata
      }, _headerLevelCellView_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _headerKdCellView_decorators, {
        kind: "field",
        name: "headerKdCellView",
        static: false,
        private: false,
        access: {
          has: obj => "headerKdCellView" in obj,
          get: obj => obj.headerKdCellView,
          set: (obj, value) => {
            obj.headerKdCellView = value;
          }
        },
        metadata: _metadata
      }, _headerKdCellView_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _rows_decorators, {
        kind: "field",
        name: "rows",
        static: false,
        private: false,
        access: {
          has: obj => "rows" in obj,
          get: obj => obj.rows,
          set: (obj, value) => {
            obj.rows = value;
          }
        },
        metadata: _metadata
      }, _rows_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _leaderboardMetric_decorators, {
        kind: "field",
        name: "leaderboardMetric",
        static: false,
        private: false,
        access: {
          has: obj => "leaderboardMetric" in obj,
          get: obj => obj.leaderboardMetric,
          set: (obj, value) => {
            obj.leaderboardMetric = value;
          }
        },
        metadata: _metadata
      }, _leaderboardMetric_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _leaderboardDownlink_decorators, {
        kind: "field",
        name: "leaderboardDownlink",
        static: false,
        private: false,
        access: {
          has: obj => "leaderboardDownlink" in obj,
          get: obj => obj.leaderboardDownlink,
          set: (obj, value) => {
            obj.leaderboardDownlink = value;
          }
        },
        metadata: _metadata
      }, _leaderboardDownlink_initializers, _instanceExtraInitializers);
      if (_metadata) Object.defineProperty(_a, Symbol.metadata, {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _metadata
      });
    })(), _a;
  })();
  let LeaderboardController = (() => {
    var _a;
    let _classSuper = panel.BoardController;
    let _instanceExtraInitializers = [];
    let _sheet_decorators;
    let _sheet_initializers = [];
    let _panel_decorators;
    let _panel_initializers = [];
    let _tablePanel_decorators;
    let _tablePanel_initializers = [];
    let _tableController_decorators;
    let _tableController_initializers = [];
    return _a = class LeaderboardController extends _classSuper {
      constructor() {
        super();
        this.sheet = (__runInitializers(this, _instanceExtraInitializers), __runInitializers(this, _sheet_initializers, void 0));
        this.panel = __runInitializers(this, _panel_initializers, void 0);
        this.tablePanel = __runInitializers(this, _tablePanel_initializers, void 0);
        this.tableController = __runInitializers(this, _tableController_initializers, void 0);
        const boardView = this.sheet.attachView();
        const panelView = this.panel.insertView(boardView);
        const tablePanel = this.tablePanel.insertView(panelView);
        const tableModel = new model.Model;
        tableModel.mount();
        const tableTrait = new ux.TableTrait;
        tableModel.setTrait("table", tableTrait);
        tableTrait.header.insertTrait();
        tableTrait.appendTrait(ux.TextColTrait, "rank").set({
          layout: {
            key: "rank",
            grow: 1,
            textColor: theme.Look.labelColor
          },
          label: "Rank"
        });
        tableTrait.appendTrait(ux.TextColTrait, "name").set({
          layout: {
            key: "name",
            grow: 3
          },
          label: "Player"
        });
        tableTrait.appendTrait(ux.TextColTrait, "level").set({
          layout: {
            key: "level",
            grow: 1,
            textColor: theme.Look.labelColor
          },
          label: "Level"
        });
        tableTrait.appendTrait(ux.TextColTrait, "team").set({
          layout: {
            key: "team",
            grow: 1,
            textColor: theme.Look.labelColor
          },
          label: "Team"
        });
        tableTrait.appendTrait(ux.TextColTrait, "kd").set({
          layout: {
            key: "kd",
            grow: 3,
            textColor: theme.Look.labelColor
          },
          label: "KD Ratio"
        });
        this.tableController.attachController().mount();
        this.tableController.attachController().tableModel.set(tableModel);
        this.tableController.attachController().table.insertView(tablePanel);
        this.tableController.attachController().table.setTrait(tableTrait);
        this.tableController.attachController().header.setUpSortableCells();
      }
    }, (() => {
      var _b;
      const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create((_b = _classSuper[Symbol.metadata]) !== null && _b !== void 0 ? _b : null) : void 0;
      _sheet_decorators = [ controller.TraitViewRef({
        extends: true,
        createView() {
          const mainElement = document.createElement("main");
          const boardView = new panel.BoardView(mainElement).set({
            style: {
              width: "100%",
              flexGrow: 1,
              flexShrink: 1,
              flexBasis: "0px",
              margin: "0px",
              backgroundColor: "#212121"
            }
          });
          return boardView;
        }
      }) ];
      _panel_decorators = [ view.ViewRef({
        viewType: panel.PanelView,
        initView(panelView) {
          panelView.set({
            classList: [ "panel-leaderboardController" ]
          });
          this.owner.tablePanel.insertView(panelView);
        }
      }) ];
      _tablePanel_decorators = [ view.ViewRef({
        extends: true,
        createView() {
          return panel.PanelView.create();
        },
        initView(panelView) {
          super.initView(panelView);
          panelView.node.classList.add("main-controller__panel-view");
          panelView.node.style.backgroundColor = "#181818";
          panelView.node.style.overflowY = "scroll";
          panelView.set({
            unitWidth: 1,
            unitHeight: 1
          });
        }
      }) ];
      _tableController_decorators = [ controller.ControllerRef({
        controllerType: LeaderboardTableController,
        extends: true
      }) ];
      __esDecorate(null, null, _sheet_decorators, {
        kind: "field",
        name: "sheet",
        static: false,
        private: false,
        access: {
          has: obj => "sheet" in obj,
          get: obj => obj.sheet,
          set: (obj, value) => {
            obj.sheet = value;
          }
        },
        metadata: _metadata
      }, _sheet_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _panel_decorators, {
        kind: "field",
        name: "panel",
        static: false,
        private: false,
        access: {
          has: obj => "panel" in obj,
          get: obj => obj.panel,
          set: (obj, value) => {
            obj.panel = value;
          }
        },
        metadata: _metadata
      }, _panel_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _tablePanel_decorators, {
        kind: "field",
        name: "tablePanel",
        static: false,
        private: false,
        access: {
          has: obj => "tablePanel" in obj,
          get: obj => obj.tablePanel,
          set: (obj, value) => {
            obj.tablePanel = value;
          }
        },
        metadata: _metadata
      }, _tablePanel_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _tableController_decorators, {
        kind: "field",
        name: "tableController",
        static: false,
        private: false,
        access: {
          has: obj => "tableController" in obj,
          get: obj => obj.tableController,
          set: (obj, value) => {
            obj.tableController = value;
          }
        },
        metadata: _metadata
      }, _tableController_initializers, _instanceExtraInitializers);
      if (_metadata) Object.defineProperty(_a, Symbol.metadata, {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _metadata
      });
    })(), _a;
  })();
  let AppController = (() => {
    var _a;
    let _classSuper = panel.BoardController;
    let _instanceExtraInitializers = [];
    let _appBarView_decorators;
    let _appBarView_initializers = [];
    let _totalPlayerCount_decorators;
    let _totalPlayerCount_initializers = [];
    let _totalMatchesCount_decorators;
    let _totalMatchesCount_initializers = [];
    let _leaderboardController_decorators;
    let _leaderboardController_initializers = [];
    let _matchStatsDownlink_decorators;
    let _matchStatsDownlink_initializers = [];
    let _playerStatsDownlink_decorators;
    let _playerStatsDownlink_initializers = [];
    return _a = class AppController extends _classSuper {
      constructor() {
        super();
        this.appBarView = (__runInitializers(this, _instanceExtraInitializers), __runInitializers(this, _appBarView_initializers, void 0));
        this.totalPlayerCount = __runInitializers(this, _totalPlayerCount_initializers, void 0);
        this.totalMatchesCount = __runInitializers(this, _totalMatchesCount_initializers, void 0);
        this.leaderboardController = __runInitializers(this, _leaderboardController_initializers, void 0);
        this.matchStatsDownlink = __runInitializers(this, _matchStatsDownlink_initializers, void 0);
        this.playerStatsDownlink = __runInitializers(this, _playerStatsDownlink_initializers, void 0);
        this.initBoard();
        const urlParams = new URLSearchParams(window.location.search);
        let host = urlParams.get("host");
        const baseUri = uri.Uri.parse(document.location.href);
        if (!host) {
          host = baseUri.base().withScheme(baseUri.schemeName === "https" ? "warps" : "warp").toString();
        }
        const nodeUri = "/match";
        this.matchStatsDownlink.setHostUri(host);
        this.matchStatsDownlink.setNodeUri(nodeUri);
        this.matchStatsDownlink.open();
        this.playerStatsDownlink.setHostUri(host);
        this.playerStatsDownlink.open();
      }
      initBoard() {
        const boardView = this.sheet.attachView().set({
          style: {
            width: "100%",
            height: "100%",
            display: "flex",
            flexDirection: "column",
            justifyContent: "flex-start",
            alignItems: "flex-start",
            boxSizing: "border-box"
          }
        });
        boardView.node.style.backgroundColor = "#181818";
        this.appBarView.insertView(boardView);
        this.leaderboardController.attachController();
      }
    }, (() => {
      var _b;
      const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create((_b = _classSuper[Symbol.metadata]) !== null && _b !== void 0 ? _b : null) : void 0;
      _appBarView_decorators = [ view.ViewRef({
        viewType: dom.HtmlView,
        createView() {
          const nav = document.createElement("nav");
          nav.style.backgroundColor = "#181818";
          return new dom.HtmlView(nav).set({
            style: {
              width: "100%",
              height: "auto",
              flexGrow: 0,
              flexShrink: 0,
              flexBasis: "auto",
              boxSizing: "border-box",
              paddingTop: "16px",
              paddingRight: "48px",
              paddingBottom: "16px",
              paddingLeft: "16px"
            }
          });
        },
        initView(appBarView) {
          const container = appBarView.appendChild("div").set({
            style: {
              width: "100%",
              height: "100%",
              display: "flex",
              flexDirection: "row",
              justifyContent: "flex-start",
              alignItems: "flex-start",
              boxSizing: "border-box"
            }
          });
          const imgEl = document.createElement("img");
          imgEl.src = "./assets/swim-logo.png";
          container.insertChild(new dom.HtmlView(imgEl), null, "swimLogo").set({
            style: {
              width: "48px",
              height: "48px",
              marginRight: "16px"
            },
            classList: [ "swim-logo" ]
          });
          const detailsContainer = container.appendChild("div", "app-bar-details-container").setIntrinsic({
            style: {
              height: "100%",
              display: "flex",
              flexDirection: "column",
              flexBasis: "0px",
              flexGrow: 1,
              flexShrink: 1,
              justifyContent: "space-between",
              alignItems: "flex-start"
            }
          });
          const title = detailsContainer.appendChild("h1").set({
            style: {
              width: "auto",
              fontWeight: "600",
              fontSize: "20px",
              lineHeight: "24px",
              color: "#FFFFFF",
              margin: "0px",
              boxSizing: "border-box"
            }
          });
          title.node.innerText = "Swim - Game Leaderboard";
          const subtitle = detailsContainer.appendChild("p").set({
            style: {
              fontWeight: "400",
              fontSize: "12px",
              lineHeight: "17px",
              color: "#FFFFFF",
              boxSizing: "border-box",
              marginTop: "8px",
              marginRight: "0px",
              marginBottom: "0px",
              marginLeft: "0px"
            }
          });
          subtitle.node.innerText = "1.0.0b";
          const detailsInnerContainer = detailsContainer.appendChild("div").set({
            style: {
              width: "100%",
              display: "flex",
              flexDirection: "row",
              justifyContent: "space-between",
              alignItems: "flex-start",
              boxSizing: "border-box"
            },
            classList: [ "details-inner-container" ]
          });
          this.owner.totalPlayerCount.insertView(detailsInnerContainer);
          this.owner.totalMatchesCount.insertView(detailsInnerContainer);
        }
      }) ];
      _totalPlayerCount_decorators = [ view.ViewRef({
        viewType: dom.HtmlView,
        createView() {
          const el = new dom.HtmlView(document.createElement("p")).set({
            style: {
              fontWeight: "400",
              fontSize: "12px",
              lineHeight: "17px",
              color: "#FFFFFF",
              boxSizing: "border-box",
              marginTop: "8px",
              marginRight: "0px",
              marginBottom: "0px",
              marginLeft: "0px"
            }
          });
          el.node.innerText = "total players";
          return el;
        },
        updateNumPlayers(numPlayers) {
          this.attachView().node.innerText = `${numPlayers} total players`;
        }
      }) ];
      _totalMatchesCount_decorators = [ view.ViewRef({
        viewType: dom.HtmlView,
        createView() {
          const el = new dom.HtmlView(document.createElement("p")).set({
            style: {
              fontWeight: "400",
              fontSize: "12px",
              lineHeight: "17px",
              color: "#FFFFFF",
              boxSizing: "border-box",
              marginTop: "8px",
              marginRight: "0px",
              marginBottom: "0px",
              marginLeft: "0px"
            }
          });
          el.node.innerText = "total matches";
          return el;
        },
        updateNumMatches(numMatches) {
          this.attachView().node.innerText = `${numMatches} total matches`;
        }
      }) ];
      _leaderboardController_decorators = [ controller.ControllerRef({
        controllerType: LeaderboardController,
        controllerKey: "body",
        didAttachController(controller) {
          controller.sheet.insertView(this.owner.sheet.attachView());
        }
      }) ];
      _matchStatsDownlink_decorators = [ client.ValueDownlink({
        laneUri: "stats",
        didSet(newValue) {
          this.owner.totalMatchesCount.updateNumMatches(newValue.get("gameCount").numberValue(0));
        }
      }) ];
      _playerStatsDownlink_decorators = [ client.ValueDownlink({
        nodeUri: "/player",
        laneUri: "stats",
        didSet(newValue) {
          this.owner.totalPlayerCount.updateNumPlayers(newValue.get("playerCount").numberValue(0));
        }
      }) ];
      __esDecorate(null, null, _appBarView_decorators, {
        kind: "field",
        name: "appBarView",
        static: false,
        private: false,
        access: {
          has: obj => "appBarView" in obj,
          get: obj => obj.appBarView,
          set: (obj, value) => {
            obj.appBarView = value;
          }
        },
        metadata: _metadata
      }, _appBarView_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _totalPlayerCount_decorators, {
        kind: "field",
        name: "totalPlayerCount",
        static: false,
        private: false,
        access: {
          has: obj => "totalPlayerCount" in obj,
          get: obj => obj.totalPlayerCount,
          set: (obj, value) => {
            obj.totalPlayerCount = value;
          }
        },
        metadata: _metadata
      }, _totalPlayerCount_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _totalMatchesCount_decorators, {
        kind: "field",
        name: "totalMatchesCount",
        static: false,
        private: false,
        access: {
          has: obj => "totalMatchesCount" in obj,
          get: obj => obj.totalMatchesCount,
          set: (obj, value) => {
            obj.totalMatchesCount = value;
          }
        },
        metadata: _metadata
      }, _totalMatchesCount_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _leaderboardController_decorators, {
        kind: "field",
        name: "leaderboardController",
        static: false,
        private: false,
        access: {
          has: obj => "leaderboardController" in obj,
          get: obj => obj.leaderboardController,
          set: (obj, value) => {
            obj.leaderboardController = value;
          }
        },
        metadata: _metadata
      }, _leaderboardController_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _matchStatsDownlink_decorators, {
        kind: "field",
        name: "matchStatsDownlink",
        static: false,
        private: false,
        access: {
          has: obj => "matchStatsDownlink" in obj,
          get: obj => obj.matchStatsDownlink,
          set: (obj, value) => {
            obj.matchStatsDownlink = value;
          }
        },
        metadata: _metadata
      }, _matchStatsDownlink_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _playerStatsDownlink_decorators, {
        kind: "field",
        name: "playerStatsDownlink",
        static: false,
        private: false,
        access: {
          has: obj => "playerStatsDownlink" in obj,
          get: obj => obj.playerStatsDownlink,
          set: (obj, value) => {
            obj.playerStatsDownlink = value;
          }
        },
        metadata: _metadata
      }, _playerStatsDownlink_initializers, _instanceExtraInitializers);
      if (_metadata) Object.defineProperty(_a, Symbol.metadata, {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _metadata
      });
    })(), _a;
  })();
  exports.AppController = AppController;
  exports.KdSeriesView = KdSeriesView;
  exports.LeaderboardController = LeaderboardController;
  exports.LeaderboardRowController = LeaderboardRowController;
  exports.LeaderboardTableController = LeaderboardTableController;
  Object.defineProperties(exports, {
    __esModule: {
      value: true
    },
    [Symbol.toStringTag]: {
      value: "Module"
    }
  });
}));
//# sourceMappingURL=game.min.js.map
