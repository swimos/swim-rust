// Copyright 2015-2020 SWIM.AI inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

use std::pin::Pin;

use futures::executor::block_on;
use futures::{future, stream, Stream, StreamExt};
use pin_utils::pin_mut;
use tokio::sync::mpsc;
use tokio::sync::oneshot;
use tokio::task::JoinHandle;

use crate::sink::item;
use crate::sink::item::ItemSink;
use std::fmt::Debug;

pub mod map;
pub mod value;

pub struct Downlink<Err: Debug, S, R> {
    pub set_sink: S,
    pub event_stream: R,
    task: Option<DownlinkTask<Err>>,
}

impl<Err: Debug, S, R> Downlink<Err, S, R> {
    fn new(set_sink: S, event_stream: R, task: Option<DownlinkTask<Err>>) -> Downlink<Err, S, R> {
        Downlink {
            set_sink,
            event_stream,
            task,
        }
    }

    /// Stop the downlink from running.
    pub async fn stop(mut self) -> Result<(), Err> {
        match (&mut self).task.take() {
            Some(t) => t.stop().await,
            _ => Ok(()),
        }
    }
}

impl<Err: Debug, S, R> Drop for Downlink<Err, S, R> {
    fn drop(&mut self) {
        match self.task.take() {
            Some(t) => {
                block_on(t.stop()).unwrap();
            }
            _ => {}
        }
    }
}

/// Asynchronously create a new downlink from a stream of input events, writing to a sink of
/// commands.
pub fn create_downlink<Err, A, State, Updates, Commands>(
    init: State,
    update_stream: Updates,
    cmd_sink: Commands,
    buffer_size: usize,
) -> Downlink<Err, mpsc::Sender<A>, mpsc::Receiver<Event<State::Ev>>>
where
    A: Send + 'static,
    State: StateMachine<A> + Send + 'static,
    State::Ev: Send + 'static,
    State::Cmd: Send + 'static,
    Err: From<item::MpscErr<Event<State::Ev>>> + Send + Debug + 'static,
    Updates: Stream<Item = Message<A>> + Send + 'static,
    Commands: for<'b> ItemSink<'b, Command<State::Cmd>, Error = Err> + Send + 'static,
{
    let model = Model::new(init);
    let (act_tx, act_rx) = mpsc::channel::<A>(buffer_size);
    let (event_tx, event_rx) = mpsc::channel::<Event<State::Ev>>(buffer_size);
    let (stop_tx, stop_rx) = oneshot::channel::<()>();

    let event_sink = item::for_mpsc_sender::<_, Err>(event_tx);
    //let event_sink = event_tx.into_err();

    // The task that maintains the internal state of the lane.
    let lane_task = model.make_downlink_task(
        combine_inputs(update_stream, act_rx, stop_rx),
        cmd_sink,
        event_sink,
    );

    let join_handle = tokio::task::spawn(lane_task);

    let dl_task = DownlinkTask {
        join_handle,
        stop_trigger: stop_tx,
    };

    Downlink::new(act_tx, event_rx, Some(dl_task))
}

#[derive(Clone, Copy, PartialEq, Eq, Debug)]
enum DownlinkState {
    Unlinked,
    Linked,
    Synced,
}

struct DownlinkTask<E> {
    join_handle: JoinHandle<Result<(), E>>,
    stop_trigger: oneshot::Sender<()>,
}

impl<E> DownlinkTask<E> {
    async fn stop(self) -> Result<(), E> {
        match self.stop_trigger.send(()) {
            Ok(_) => match self.join_handle.await {
                Ok(r) => r,
                Err(_) => Ok(()), //TODO Ignoring the case where the downlink task panicked. Can maybe do better?
            },
            Err(_) => Ok(()),
        }
    }
}

#[derive(Clone, PartialEq, Eq, Debug)]
pub enum Message<A> {
    Linked,
    Synced,
    Action(A),
    Unlinked,
}

#[derive(Clone, PartialEq, Eq, Debug)]
pub enum Command<A> {
    Sync,
    Action(A),
    Unlink,
}

#[derive(Clone, PartialEq, Eq, Debug)]
pub struct Event<A>(pub A, pub bool);

#[derive(Clone, PartialEq, Eq, Debug)]
pub enum Operation<A> {
    Start,
    Message(Message<A>),
    Action(A),
    Close,
}

/// The state of a downlink and the receivers of events that can be generated by it.
pub struct Model<State> {
    state: DownlinkState,
    data_state: State,
}

impl<State> Model<State> {
    fn new(init: State) -> Model<State> {
        Model {
            state: DownlinkState::Unlinked,
            data_state: init,
        }
    }

    async fn make_downlink_task<E, A, Ops, Commands, Events>(
        mut self,
        ops: Ops,
        mut cmd_sink: Commands,
        mut ev_sink: Events,
    ) -> Result<(), E>
    where
        State: StateMachine<A>,
        Ops: Stream<Item = Operation<A>> + Send + 'static,
        Commands: for<'b> ItemSink<'b, Command<State::Cmd>, Error = E>,
        Events: for<'b> ItemSink<'b, Event<State::Ev>, Error = E>,
    {
        pin_mut!(ops);
        let mut ops_str: Pin<&mut Ops> = ops;

        loop {
            if let Some(op) = ops_str.next().await {
                let responses = StateMachine::handle_operation(&mut self, op);
                let r = match responses {
                    (Some(event), Some(cmd)) => match ev_sink.send_item(event).await {
                        Ok(()) => cmd_sink.send_item(cmd).await,
                        e @ Err(_) => e,
                    },
                    (Some(event), _) => ev_sink.send_item(event).await,
                    (_, Some(command)) => cmd_sink.send_item(command).await,
                    _ => Ok(()),
                };
                if r.is_err() {
                    break r;
                }
            } else {
                break Ok(());
            }
        }
    }
}

pub trait StateMachine<A>: Sized {
    type Ev;
    type Cmd;

    fn handle_operation(
        model: &mut Model<Self>,
        op: Operation<A>,
    ) -> (Option<Event<Self::Ev>>, Option<Command<Self::Cmd>>);
}

/// Combines together updates received from the Warp connection, local sets and the stop signal
/// into a single stream.
fn combine_inputs<A, Upd, Act>(
    updates: Upd,
    actions: Act,
    stop: oneshot::Receiver<()>,
) -> impl Stream<Item = Operation<A>> + Send + 'static
where
    A: Send + 'static,
    Upd: Stream<Item = Message<A>> + Send + 'static,
    Act: Stream<Item = A> + Send + 'static,
{
    let upd_operations = updates.map(|v| Operation::Message(v));
    let act_operations = actions.map(|v| Operation::Action(v));
    let close_operations = stream::once(stop).map(|_| Operation::Close);

    let updates_and_sets = stream::select(upd_operations, act_operations);

    let init = stream::once(future::ready(Operation::Start));

    init.chain(stream::select(close_operations, updates_and_sets))
}
