language: rust

branches:
  only:
    - master
    - router

matrix:
  include:
    - os: linux
      arch: amd64
      services:
        - docker
      env:
        - ARCH=amd64
        - TEST_SERVER_VERSION=v1.1
        - TEST_SERVER_IMAGE_NAME="org.swimos/swim-docker-example:1.1"
        - REPO_URL="https://github.com/swimos/swim-docker-example/"
        - SWIM_CRATES="client form common server utilities deserialize serialize"
      script:
        - cargo fmt -- --check
        - cargo clippy --all-features -- -D warnings -A clippy::match_wild_err_arm
        - cargo test --workspace --exclude client
        - cd client
        # Features aren't allowed in the root of a virtual workspace
        - cargo test --package client --features test-server
        - cd ..

    - os: linux
      arch: arm64
      env: ARCH=arm64
      script:
        - cargo fmt -- --check
        - cargo clippy --all-features -- -D warnings -A clippy::match_wild_err_arm
        - cargo test --workspace

    - os: osx
      arch: amd64
      env: ARCH=amd64
      script:
        - cargo fmt -- --check
        - cargo clippy --all-features -- -D warnings -A clippy::match_wild_err_arm
        - cargo test --workspace

    - os: windows
      arch: amd64
      env: ARCH=amd64
      script:
        - cargo fmt -- --check
        - cargo clippy --all-features -- -D warnings -A clippy::match_wild_err_arm
        - cargo test --workspace

rust:
  - 1.43.0

cache:
  directories:
    - $HOME/.cargo
    - $HOME/.rustup

before_cache:
  - rm -rf /home/travis/.cargo/registry

before_script:
  - rustup component add clippy
  - rustup component add rustfmt

addons:
  apt:
    packages:
      - libcurl4-openssl-dev
      - libelf-dev
      - libdw-dev
      - cmake
      - gcc
      - binutils-dev
      - libiberty-dev

after_success:
  - |
    if [[ "$ARCH" == "amd64" && "$TRAVIS_OS_NAME" == "linux" ]]; then
    wget https://github.com/SimonKagstrom/kcov/archive/master.tar.gz &&
    tar xzf master.tar.gz &&
    cd kcov-master &&
    mkdir build &&
    cd build &&
    cmake .. &&
    make &&
    sudo make install &&
    cd ../.. &&
    rm -rf kcov-master &&
    for crate in $SWIM_CRATES; do for file in target/debug/$crate-*[^\.d]; do mkdir -p "target/cov/$(basename $file)"; kcov --exclude-pattern=/.cargo,/usr/lib --verify "target/cov/$(basename $file)" "$file"; done; done &&
    bash <(curl -s https://codecov.io/bash) &&
    echo "Uploaded code coverage"
    fi