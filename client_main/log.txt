#![feature(prelude_import)]
#[prelude_import]
use std::prelude::v1::*;
#[macro_use]
extern crate std;
async fn main() {
    tokio::runtime::Builder::new().basic_scheduler().enable_all().build().expect("Failed to build Tokio runtime.").block_on(async 
                                                                                                                                {
                                                                                                                                    {
                                                                                                                                        {
                                                                                                                                            ::std::io::_print(::core::fmt::Arguments::new_v1(&["Hello from Swim client!\n"],
                                                                                                                                                                                             &match ()
                                                                                                                                                                                                  {
                                                                                                                                                                                                  ()
                                                                                                                                                                                                  =>
                                                                                                                                                                                                  [],
                                                                                                                                                                                              }));
                                                                                                                                        };
                                                                                                                                        tokio::spawn(async 
                                                                                                                                                         {
                                                                                                                                                             {
                                                                                                                                                                 ::std::io::_print(::core::fmt::Arguments::new_v1(&["Spawned task\n"],
                                                                                                                                                                                                                  &match ()
                                                                                                                                                                                                                       {
                                                                                                                                                                                                                       ()
                                                                                                                                                                                                                       =>
                                                                                                                                                                                                                       [],
                                                                                                                                                                                                                   }));
                                                                                                                                                             };
                                                                                                                                                         });
                                                                                                                                    }
                                                                                                                                });
}
