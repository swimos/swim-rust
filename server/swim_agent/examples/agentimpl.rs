// Copyright 2015-2021 Swim Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

use std::{
    collections::{HashMap, HashSet},
    fmt::Debug,
};

use bytes::BytesMut;
use frunk::{Coprod, Coproduct};
use swim_agent::{
    agent_model::{AgentLaneModel, WriteResult},
    event_handler::{EventHandler, UnitHandler},
    lanes::{
        value::{
            decode_and_set, lifecycle::StatefulValueLaneLifecycle, DecodeAndSet, ValueLane,
            ValueLaneSync,
        },
        Lane,
    },
    lifecycle::{
        lane_event::ValueLeaf, stateful::StatefulAgentLifecycle, utility::HandlerContext,
        AgentLifecycle,
    },
};
use swim_api::protocol::map::MapMessage;
use swim_model::Text;
use uuid::Uuid;

fn main() {
    println!("Hello, world!");
}

/*
 * This example provides a sketch for how the macros to define an agent will work. It will be remove (and replaced
 * with a real example) after the macro crate is added.
 */

#[derive(Debug)]
//#[derive(Debug, AgentLaneModel)]
pub struct MyAgent {
    first: ValueLane<i32>,
    second: ValueLane<Text>,
}

pub struct MyAgentLifecycle {
    content: Text,
}

//#[agent_lifecycle(MyAgent)]
impl MyAgentLifecycle {
    //#[on_start]
    pub fn on_start(
        &self, //This could be &mut self at the expense of the event handlers not being able to take the lifetime of the self ref. Possibly the macro could allow both with diffrent semantics (which could be a bit confusing).
        context: HandlerContext<MyAgent>,
    ) -> impl EventHandler<MyAgent, Completion = ()> {
        context
            .get_agent_uri()
            .and_then(move |uri| context.effect(move || println!("Starting: {}", uri)))
    }

    //#[on_event(lane = "first")]
    pub fn first_on_event(
        &self,
        context: HandlerContext<MyAgent>,
        value: &i32,
    ) -> impl EventHandler<MyAgent, Completion = ()> + '_ {
        let n = *value;
        context.get_value(MyAgent::SECOND).and_then(move |text| {
            context.effect(move || {
                println!(
                    "first = {}, second = {}, content = {}",
                    n, text, &self.content
                );
            })
        })
    }
}

const _: () = {
    impl MyAgent {
        //These will be generated by the derive macro which isn't ideal.
        pub const FIRST: fn(&Self) -> &ValueLane<i32> = |agent| &agent.first;
        pub const SECOND: fn(&Self) -> &ValueLane<Text> = |agent| &agent.second;
    }

    //Generated by the lifecycle attribute macro.
    impl MyAgentLifecycle {
        pub fn into_lifecycle(self) -> impl AgentLifecycle<MyAgent> {
            let first_lifecycle =
                StatefulValueLaneLifecycle::<MyAgent, MyAgentLifecycle, _>::default()
                    .on_event(MyAgentLifecycle::first_on_event);
            let lanes_lifecycle = ValueLeaf::new("first", MyAgent::FIRST, first_lifecycle);

            StatefulAgentLifecycle::<MyAgent, _>::new(self)
                .on_start(MyAgentLifecycle::on_start)
                .on_lane_event(lanes_lifecycle)
        }
    }

    const FIRST_NAME: &str = "first";
    const SECOND_NAME: &str = "second";
    const FIRST_ID: u64 = 0;
    const SECOND_ID: u64 = 1;

    impl Default for MyAgent {
        fn default() -> Self {
            MyAgent {
                first: ValueLane::new(FIRST_ID, 0),
                second: ValueLane::new(SECOND_ID, Text::default()),
            }
        }
    }

    //Geneated by the derive macro.
    impl AgentLaneModel for MyAgent {
        type ValCommandHandler = Coprod!(
            DecodeAndSet<MyAgent, i32>,
            DecodeAndSet<MyAgent, Text>,
        );

        type MapCommandHandler = UnitHandler;

        type OnSyncHandler = Coprod!(
            ValueLaneSync<MyAgent, i32>,
            ValueLaneSync<MyAgent, Text>,
        );

        fn value_like_lanes(&self) -> HashSet<&str> {
            let mut lanes = HashSet::new();
            lanes.insert(FIRST_NAME);
            lanes.insert(SECOND_NAME);
            lanes
        }

        fn map_like_lanes(&self) -> HashSet<&str> {
            HashSet::new()
        }

        fn lane_ids(&self) -> HashMap<u64, Text> {
            let mut map = HashMap::new();
            map.insert(FIRST_ID, Text::new(FIRST_NAME));
            map.insert(SECOND_ID, Text::new(SECOND_NAME));
            map
        }

        fn on_value_command(&self, lane: &str, body: BytesMut) -> Option<Self::ValCommandHandler> {
            match lane {
                FIRST_NAME => {
                    let handler = decode_and_set::<MyAgent, i32>(body, MyAgent::FIRST);
                    Some(Coproduct::Inl(handler))
                }
                SECOND_NAME => {
                    let handler = decode_and_set::<MyAgent, Text>(body, MyAgent::SECOND);
                    Some(Coproduct::Inr(Coproduct::Inl(handler)))
                }
                _ => None,
            }
        }

        fn on_map_command(
            &self,
            _lane: &str,
            _body: MapMessage<BytesMut, BytesMut>,
        ) -> Option<Self::MapCommandHandler> {
            None
        }

        fn on_sync(&self, lane: &str, id: Uuid) -> Option<Self::OnSyncHandler> {
            match lane {
                FIRST_NAME => {
                    let handler = ValueLaneSync::new(MyAgent::FIRST, id);
                    Some(Coproduct::Inl(handler))
                }
                SECOND_NAME => {
                    let handler = ValueLaneSync::new(MyAgent::SECOND, id);
                    Some(Coproduct::Inr(Coproduct::Inl(handler)))
                }
                _ => None,
            }
        }

        fn write_event(&self, lane: &str, buffer: &mut BytesMut) -> Option<WriteResult> {
            match lane {
                FIRST_NAME => Some(self.first.write_to_buffer(buffer)),
                SECOND_NAME => Some(self.second.write_to_buffer(buffer)),
                _ => None,
            }
        }
    }
};
